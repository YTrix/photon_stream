<container>
    <properties url="classpath:/default/settings_mc.properties" />

    <property name="infile" value="file:src/main/resources/testMcFile.fits.gz" />
    <property name="drsfile" value="file:src/main/resources/testMcDrsFile.drs.fits.gz" />

    <property name="integralGainFile" value="classpath:/default/defaultIntegralGains.csv" />

    <property name="out_path_basename" value="output" />

    <service id="calibService" class="fact.calibrationservice.ConstantCalibService" />

    <!--<stream id="fact" class="fact.io.hdureader.FITSStream" url="${infile}"/>-->
    <stream id="fact" class="fact.io.zfits.ZFitsStream" url="${infile}"/>

    <process id="2" input="fact">
        <stream.flow.Skip condition="%{data.TriggerType} != 4" />
        <!--    FACT trigger types:
                Design and commissioning of the trigger
                electronics for a novel Geiger-mode avalanche
                photodiode based camera for Imaging
                Atmospheric Cherenkov Telescopes
                Dissertation Patrick Vogler, page 93
                1: external 1 GPS (like pedestal)
                2: external 2 GPS (like pedestal)
                1024: pedestal
                4: physics (self triggered)
        -->

        <include url="classpath:/default/mc/calibration_mc.xml" />
        <include url="classpath:/default/mc/extraction_mc.xml" />

        <fact.extraction.AboveThreshold
                dataKey="Data"
                threshold="2040"
                outputKey="Saturation"
        />

        <PrintData/>

        <stream.flow.If condition="%{data.SaturationPixelCount} &lt; 100">
            <fact.photonstream.SinglePulseExtraction
                    dataKey="DataCalibrated"
                    outputKey="PhotonArrivals"
                    maxIterations="500"
            />
        </stream.flow.If>
        <stream.flow.If condition="%{data.SaturationPixelCount} &gt; 99">
            <fact.photonstream.SinglePulseExtraction
                    dataKey="DataCalibrated"
                    outputKey="PhotonArrivals"
                    maxIterations="0"
            />
        </stream.flow.If>

        <fact.features.source.SourcePosition
                outputKey="sourcePosition"
                pointingZdKey="MPointingPos.fZd"
                pointingAzKey="MPointingPos.fAz"
                sourceZdKey="MSimSourcePos.fZd"
                sourceAzKey="MSimSourcePos.fAz"
        />

        <fact.utils.ElementwiseMultiplyDoubleArray
                inputKey="PhotonArrivalsBaseLine"
                outputKey="CentiBaseLines"
                factor="100.0"
        />

        <fact.utils.CastDoubleArrayToIntArray
                inputKey="CentiBaseLines"
                outputKey="CentiBaseLines"
        />

        <stream.data.RenameKey from="NIGHT" to="Night"/>
        <stream.data.RenameKey from="RUNID" to="Run"/>
        <stream.data.RenameKey from="EventNum" to="Event"/>
        <stream.data.RenameKey from="UnixTimeUTC" to="UnixTime_s_us"/>
        <stream.data.RenameKey from="TriggerType" to="Trigger"/>
        <stream.data.RenameKey from="AzPointing" to="Az_deg"/>
        <stream.data.RenameKey from="ZdPointing" to="Zd_deg"/>
        <stream.data.RenameKey from="PhotonArrivals" to="PhotonArrivals_500ps"/>
        <stream.data.RenameKey from="Saturation" to="SaturatedPixels"/>

        <fact.io.JSONWriter
                keys="Night,Run,Event,UnixTime_s_us,Trigger,Az_deg,Zd_deg,PhotonArrivals_500ps,SaturatedPixels,${mc_truth},McCherPhotWeight,McCherPhotNumber,McMuonCherPhotWeight,McMuonCherPhotNumber,McNoisePhotWeight,McCherArrTimeMean,McCherArrTimeVar,McCherArrTimeMin,McCherArrTimeMax,MSimSourcePos.fZd,MSimSourcePos.fAz"
                url="${out_path_basename}.phs.jsonl.gz"
                writeListOfItems="true"
                pixelSetsAsInt="true"
                gzip="true"
                jsonl="true"
        />

        <fact.io.JSONWriter
                keys="Night,Run,Event,CentiBaseLines"
                url="${out_path_basename}.bsl.jsonl.gz"
                writeListOfItems="true"
                pixelSetsAsInt="true"
                gzip="true"
                jsonl="true"
        />
    </process>
</container>